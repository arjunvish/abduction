;Motivating example from integration with SMTCoq, part 2
(set-option :print-success true)
(set-option :produce-assignments true)
(set-option :produce-abducts true)
(set-option :incremental true)
(set-logic QF_UFLIA)
(declare-fun op_2 (Int Int ) Int)
(declare-fun op_1 () Int)
(declare-fun op_0 () Int)
(assert (>= (op_2 op_0 op_1) 0))
(get-abduct A (>= (op_2 op_1 op_0) 0))
(get-abduct-next)
(get-abduct-next)
(get-abduct-next)
(get-abduct-next)
(get-abduct-next)
(get-abduct-next)
;What can Coq provide so the goal becomes provable?
;(define-fun A () Bool (= op_0 op_1))
;(define-fun A () Bool (= (op_2 op_1 op_0) 0))
;(define-fun A () Bool (= (op_2 op_1 op_0) 1))
;(define-fun A () Bool (<= 0 (op_2 op_1 op_0)))
;(define-fun A () Bool (<= 1 (op_2 op_1 op_0)))
;(define-fun A () Bool (= (op_2 op_0 op_1) (op_2 op_1 op_0)))
;(define-fun A () Bool (= (op_2 op_1 op_0) (+ 1 1)))