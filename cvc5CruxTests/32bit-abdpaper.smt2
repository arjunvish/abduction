(set-option :produce-models true)
(set-option :global-declarations true)
(set-option :produce-unsat-cores true)
(set-option :produce-abducts true)
(set-logic ALL)
(get-info :error-behavior)
(push 1)

(declare-fun y () (_ BitVec 32))
(define-fun x!0 () Bool (bvslt (_ bv0 32) y))
(assert (! x!0 :named x!1))
(push 1)

(define-fun x!2 () Bool (bvslt y (_ bv0 32)))
(declare-fun x () (_ BitVec 32))
(define-fun x!3 () Bool (bvslt x (_ bv0 32)))
(define-fun x!4 () (_ BitVec 32) (bvadd y x))
(define-fun x!5 () Bool (bvslt x!4 (_ bv0 32)))
(define-fun x!6 () Bool (and x!2 x!3 (not x!5)))
(define-fun x!7 () Bool (and (not x!2) (not x!3) x!5))
(define-fun x!8 () Bool (and (not x!6) (not x!7)))
(define-fun x!9 () Bool (not x!8))
(push 2)
(assert (! x!9 :named x!10))
(check-sat)
(get-value (x))
(get-value (y))
(pop 2)
(get-abduct abd x!8)
(get-abduct-next)
(get-abduct-next)
(pop 1)
(push 1)
(define-fun x!11 () (_ BitVec 32) (bvadd y x))
(define-fun x!12 () Bool (bvslt x!11 (_ bv0 32)))
(declare-fun z () (_ BitVec 32))
(define-fun x!13 () Bool (bvslt z (_ bv0 32)))
(define-fun x!14 () (_ BitVec 32) (bvadd (bvadd z y) x))
(define-fun x!15 () Bool (bvslt x!14 (_ bv0 32)))
(define-fun x!16 () Bool (and x!12 x!13 (not x!15)))
(define-fun x!17 () Bool (and (not x!12) (not x!13) x!15))
(define-fun x!18 () Bool (and (not x!16) (not x!17)))
(define-fun x!19 () Bool (not x!18))
(push 2)
(assert (! x!19 :named x!20))
(check-sat)
(get-value (x))
(get-value (y))
(get-value (z))
(get-value (x!11))
(pop 2)
(get-abduct abd x!18)
(get-abduct-next)
(get-abduct-next)
(pop 1)
(exit)